# -*- coding: utf-8 -*-
"""Car price prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NBoLcVSz7CGqfUpejXmM1UGjQNmG2MGA

Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor

"""Load the Dataset"""

data=pd.read_csv("cardata.csv")
data.head()

data.info()

"""Checking for NULL Values




"""

data.isnull().sum()

data.describe()

"""Correlation Matrix"""

col=data[['Year','Selling_Price','Present_Price','Kms_Driven','Owner']]
correlation_matrix=col.corr()
print(correlation_matrix)

"""create a heatmap of correlation matrix"""

plt.figure(figsize=(6,6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')

plt.title("Correlation Matrix Heatmap")
plt.show()

"""Top Cars"""

top_cars=data['Car_Name'].value_counts().head(10)
print(top_cars)

"""Top 10 companies with their cars"""

plt.figure(figsize=(6,6))
sns.countplot(y=data['Car_Name'], order=top_cars.index)
plt.title("Top 10 companies with their cares")
plt.show()

data['Fuel_Type'].value_counts()

sns.countplot(x=data['Fuel_Type'])

data['Seller_Type'].value_counts()

sns.countplot(x=data['Seller_Type'])

data['Transmission'].value_counts()

sns.countplot(x=data['Transmission'])

sns.boxplot(x=data['Selling_Price'])

"""How old the car is?"""

plt.figure(figsize=(6,6))
sns.countplot(y=data['Year'])
plt.title("How old the car is?")
plt.show()

"""Most of the cars from 2015"""

sns.scatterplot(x=data['Selling_Price'],y=data['Kms_Driven'])

"""Getting non_numeric columns"""

data.select_dtypes(include=['object']).columns

label_encoder = LabelEncoder()

"""Convert categorical columns into numerical columns using LabelEncoder"""

data['Car_Name'] = label_encoder.fit_transform(data['Car_Name'])
data['Fuel_Type'] = label_encoder.fit_transform(data['Fuel_Type'])
data['Seller_Type'] = label_encoder.fit_transform(data['Seller_Type'])
data['Transmission'] = label_encoder.fit_transform(data['Transmission'])
data.head()

"""Split data into training & testing data"""

X = data.drop('Selling_Price', axis=1)
y = data['Selling_Price']
X_train, X_test, y_train, y_test = train_test_split(X, y,
test_size=0.2, random_state=35)

scaler = StandardScaler()
X_train_scaler = scaler.fit_transform(X_train)
X_test_scaler = scaler.transform(X_test)

"""Linear Regression"""

linear_reg = LinearRegression()
linear_reg.fit(X_train_scaler, y_train)
linear_reg_predictions = linear_reg.predict(X_test_scaler)

"""Model Evaluation"""

linear_reg_mse = mean_squared_error(y_test, linear_reg_predictions)
linear_reg_r2 = r2_score(y_test, linear_reg_predictions)
print('Mean Squared Error:',linear_reg_mse)
print('R-squared:', linear_reg_r2)